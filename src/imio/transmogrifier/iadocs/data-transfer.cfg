[transmogrifier]
pipeline =
    initialization
    a_service_match_read
    a_service_match_store
    a_1_service_read
#    a_1_service_check
    a_plone_service_write
    a_service_match_write
    a_service_update
# bb
    b_mailtype_match_read
    b_1_mailtype_match_check
    b_mailtype_match_store
    b_1_mail_read
#    b_1_mail_reject
    b_1_store_used_nature
    b_1_store_used_source
    b_1_mailtype_read
    b_mailtype_used_only
    b_1_mailtype_check
    b_plone_mailtype_write
    b_1_mailtype_by_type
    b_mailtype_match_write
    b_mailtype_update
# cc
    c_1_user_match_read
    c_user_match_store
    c_1_user_read
    c_plone_user_write
    c_1_user_match_write
# dd
    d_need_c
    d_1_contacts_read
    d_1_contacts_uid_only
    d_1_contacts_store
    d_1_mail_read
    d_1_S_only
    d_om_sender_creation
# ee
    e_category_match_read
    e_1_mail_read
    e_1_folder_read
    e_1_category_reject
    e_1_store_used_category
    e_1_category_read
    e_1_category_check
    count1
    e_category_used_only
    e_category_not_in_plone
    e_plone_category_write
    e_category_match_write
#    continue
#     constructor
# #    1_service_correction
#     schemaupdater
# #    datesupdater
# #    versioning (history)
#     reindexobject
#     workflowupdater
    count2
    post_actions
    breakpoint
    short_log
    lastsection

# mandatory section !
[config]
# needed if contact encoding group is enabled in Plone
creating_group =
raise_on_error = 1
internal_number_types = organization person held_position
none_value = NULL

[initialization]
blueprint = imio.transmogrifier.iadocs.init
# basepath is an absolute directory. If empty, buildout dir will be used
basepath =
# if subpath, it will be appended to basepath
subpath = imports
# if empty it will be subpath full path
csvpath = source1_dir

[a_service_match_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
b_condition = python: modules['os'].path.exists(filename)
# filename is relative to csvpath
filename = 1_service_match.csv
fieldnames = eid eparent etitle uid title
bp_key = e_service_match
# none_value = ${config:none_value}
# csv_headers = python:True
# csv_encoding = utf8
# dialect = excel
# fmtparam-strict = python:True
# fmtparam-delimiter = python:','
# raise_on_error = ${config:raise_on_error}

[a_service_match_store]
blueprint = imio.transmogrifier.iadocs.store_in_data
condition = python: item.get('_bpk') == u'e_service_match'
bp_key = e_service_match
store_key = eid
fieldnames = etitle uid title
yield = 0

[a_1_service_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
#b_condition = python: not modules['os'].path.exists(modules['imio.transmogrifier.iadocs.utils'].full_path(storage['csvp'], transmogrifier.get('a_service_match_read', {}).get('filename', '_not_found_')))
filename = eServices.csv
fieldnames = _A _eid _title _pid _E _F _G _H _I _J _code _L _M _N _O _P _Q _R _S _T _U _V _W _X _Y _Z _AA _AB _AC _AD _AE _AF _AG _AH _AI _AJ _AK _AL _AM _AN _AO _AP _AQ _AR
bp_key = e_service

[a_1_service_check]
blueprint = imio.transmogrifier.iadocs.common_input_checks
bp_key = e_service
condition = python: item.get('_bpk') == u'e_service'
integers =
booleans =
hyphen_newline =
raise_on_error = ${config:raise_on_error}

[a_plone_service_write]
blueprint = imio.transmogrifier.iadocs.csv_writer
b_condition = python: not modules['os'].path.exists(modules['imio.transmogrifier.iadocs.utils'].full_path(storage['csvp'], transmogrifier.get('a_service_match_read', {}).get('filename', '_not_found_')))
filename = 0_imio_service.csv
fieldnames = uid ft t
headers = uid full_title title
bp_key = p_orgs_all
# if store_key, the printed value is not the item but the values in storage['data'][{bp_key}]. The key is considered as store_key field
store_key = uid
store_key_sort = ft

[a_service_match_write]
blueprint = imio.transmogrifier.iadocs.csv_writer
b_condition = python: not modules['os'].path.exists(modules['imio.transmogrifier.iadocs.utils'].full_path(storage['csvp'], transmogrifier.get('a_service_match_read', {}).get('filename', '_not_found_')))
condition = python: item.get('_bpk') == 'e_service'
filename = 0_service_match.csv
fieldnames = _eid _pid title
headers = eid parent_eid etitle uid full_title
bp_key = 0_service_match

[a_service_update]
blueprint = imio.transmogrifier.iadocs.a_service_update
condition = python: item.get('_bpk') == u'e_service'

[b_mailtype_match_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
b_condition = python: modules['os'].path.exists(filename)
filename = 1_mailtype_match.csv
fieldnames = _eid _etype _etitle _enature _esource _c_type _key _title _active
bp_key = e_mailtype_match

[b_1_mailtype_match_check]
blueprint = imio.transmogrifier.iadocs.common_input_checks
bp_key = e_mailtype_match
condition = python: item.get('_bpk') == u'e_mailtype_match'
integers =
booleans = _enature _esource _active
hyphen_newline =

[b_mailtype_match_store]
blueprint = imio.transmogrifier.iadocs.store_in_data
condition = python: item.get('_bpk') == u'e_mailtype_match'
bp_key = e_mailtype_match
store_key = _eid
store_subkey = _etype
fieldnames = _enature _esource _c_type _key _title _active
yield = 1

[b_1_mail_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
b_condition = python: not modules['os'].path.exists(modules['imio.transmogrifier.iadocs.utils'].full_path(storage['csvp'], transmogrifier.get('b_mailtype_match_read', {}).get('filename', '_not_found_')))
filename = eCourriers.csv
fieldnames = _A _eid _C reception_date original_mail_date external_reference_no due_date _nature_id _sender_id _sender _service title _remark _etype _O classification_categories _Q _R _S _T _U _to_del _W _source _source_id _Z _AA _AB _AC _AD _AE _AF _AG _AH _AI _AJ _AK _AL _AM _AN _AO _AP _AQ _AR _AS _AT _AU _AV _AW _AX _AY _AZ _BA _BB _BC _BD _BE _BF _BG _BH _BI _BJ _version _BL _BM
bp_key = e_mail_mailtype

[b_1_mail_reject]
blueprint = imio.transmogrifier.iadocs.condition
condition1 = python: name[0:1] in transmogrifier.parts and item.get('_bpk') == 'e_mail_mailtype'
condition2 = python: item.get('_bpk') in ('E', 'S') and str(item['_to_del']) != '1'

[b_1_store_used_nature]
blueprint = imio.transmogrifier.iadocs.store_in_data
condition = python: item.get('_bpk') == u'e_mail_mailtype'
bp_key = e_used_mailtype
store_key = _nature_id
store_subkey = _etype
fieldnames = _eid
yield = 1

[b_1_store_used_source]
blueprint = imio.transmogrifier.iadocs.store_in_data
condition = python: item.get('_bpk') == u'e_mail_mailtype'
bp_key = e_used_mailtype
store_key = _source_id
store_subkey = _etype
fieldnames = _eid
yield = 0

[b_1_mailtype_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
b_condition = python: not modules['os'].path.exists(modules['imio.transmogrifier.iadocs.utils'].full_path(storage['csvp'], transmogrifier.get('b_mailtype_match_read', {}).get('filename', '_not_found_')))
filename = eNatures.csv
fieldnames = _A _eid _etitle _D _nature _source _G _H _I _J _K _L _M _N _O
bp_key = e_mailtype

[b_mailtype_used_only]
blueprint = imio.transmogrifier.iadocs.condition
condition1 = python: name[0:1] in transmogrifier.parts and item.get('_bpk') == u'e_mailtype'
condition2 = python: item.get('_eid') in storage['data'].get('e_used_mailtype', [])

[b_1_mailtype_check]
blueprint = imio.transmogrifier.iadocs.common_input_checks
bp_key = e_mailtype
condition = python: item.get('_bpk') == u'e_mailtype'
integers =
booleans = _nature _source
hyphen_newline =
raise_on_error = ${config:raise_on_error}

[b_plone_mailtype_write]
blueprint = imio.transmogrifier.iadocs.csv_writer
b_condition = python: not modules['os'].path.exists(modules['imio.transmogrifier.iadocs.utils'].full_path(storage['csvp'], transmogrifier.get('b_mailtype_match_read', {}).get('filename', '_not_found_')))
filename = 0_imio_mailtype.csv
fieldnames = type value dtitle active
headers = type key title active
bp_key = p_mailtype
store_key = type
store_subkey = value
store_key_sort =

[b_1_mailtype_by_type]
blueprint = imio.transmogrifier.iadocs.b_1_mailtype_by_type
condition = python: not storage['data'].get('e_mailtype_match') and item.get('_bpk') == 'e_mailtype'
related_storage = e_used_mailtype

[b_mailtype_match_write]
blueprint = imio.transmogrifier.iadocs.csv_writer
b_condition = python: not modules['os'].path.exists(modules['imio.transmogrifier.iadocs.utils'].full_path(storage['csvp'], transmogrifier.get('b_mailtype_match_read', {}).get('filename', '_not_found_')))
condition = python: item.get('_bpk') == 'e_mailtype'
filename = 0_mailtype_match.csv
fieldnames = _eid _etype _etitle _nature _source
headers = eid etype etitle nature source type key title active
bp_key = 0_mailtype_match

[b_mailtype_update]
blueprint = imio.transmogrifier.iadocs.b_mailtype_update
condition = python: item['_bpk'] == u'e_mailtype_match'

[c_1_user_match_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
b_condition = python: modules['os'].path.exists(filename)
filename = 1_user_match.csv
fieldnames = _eid _nom _prenom _uid _fullname
bp_key = e_user_match

[c_user_match_store]
blueprint = imio.transmogrifier.iadocs.store_in_data
condition = python: item.get('_bpk') == u'e_user_match'
bp_key = e_user_match
store_key = _eid
fieldnames = _nom _prenom _uid _fullname
yield = 0

[c_1_user_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
b_condition = python: not modules['os'].path.exists(modules['imio.transmogrifier.iadocs.utils'].full_path(storage['csvp'], transmogrifier.get('c_1_user_match_read', {}).get('filename', '_not_found_')))
filename = eUsers.csv
fieldnames = _A _eid _elogin _D _active _F _G _H _I _J _K _L _M _N _O _P _Q _R _S _T _nom _prenom _W _X _Y _Z
             _AA _AB _AC _AD _AE _AF _AG _AH _AI _AJ _AK _AL _AM _AN _AO _AP _AQ _AR _AS _AT _AU _AV _AW _AX _AY _AZ
             _BA _BB _BC _BD _BE _BF _BG _BH _BI _BJ _BK _BL _BM _BN _BO _BP _BQ _BR _BS _BT _BU _BV _BW _BX _BY _BZ
             _CA _CB _CC _CD _CE _CF _CG _CH _CI _CJ _CK _CL _CM _CN _CO _CP _CQ _CR _CS _CT _CU _CV _CW _CX _CY _CZ
             _DA _DB _DC _DD _DE _DF _DG _DH _DI _DJ _DK _DL _DM _DN _DO _DP _DQ _DR _DS _DT _DU _DV _DW _DX _DY _DZ
             _EA _EB _EC _ED _EE _EF _EG _EH _EI _EJ _EK _EL _EM _EN _EO _EP _EQ _ER _ES _ET _EU _EV _EW _EX _EY _EZ
             _FA _FB _FC _FD _FE _FF _FG _FH _FI _FJ _FK _FL _FM _FN _FO _FP _FQ _FR _FS _FT _FU _FV
bp_key = e_user

[c_plone_user_write]
blueprint = imio.transmogrifier.iadocs.csv_writer
b_condition = python: not modules['os'].path.exists(modules['imio.transmogrifier.iadocs.utils'].full_path(storage['csvp'], transmogrifier.get('c_1_user_match_read', {}).get('filename', '_not_found_')))
filename = 0_imio_user.csv
fieldnames = uid fullname
headers = uid fullname
bp_key = p_user
store_key = uid
store_key_sort = fullname

[c_1_user_match_write]
blueprint = imio.transmogrifier.iadocs.csv_writer
b_condition = python: not modules['os'].path.exists(modules['imio.transmogrifier.iadocs.utils'].full_path(storage['csvp'], transmogrifier.get('c_1_user_match_read', {}).get('filename', '_not_found_')))
condition = python: item.get('_bpk') == 'e_user'
filename = 0_user_match.csv
fieldnames = _eid _nom _prenom
headers = eid nom prenom p_uid p_fullname
bp_key = 0_user_match
yield = 0

[d_need_c]
blueprint = imio.transmogrifier.iadocs.need_other
parts = c

[d_1_contacts_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
b_condition =
filename = eContacts.csv
fieldnames = _A _eid _uid _D _E _F _G _H _I _J _K _L _M _N _O _P _Q _R _S _T _U _V _W _X _Y _Z
             _AA _AB _AC _AD _AE _AF _AG _AH _AI _AJ _AK _AL _AM _AN _AO _AP _AQ _AR _AS _AT _AU _AV _AW _AX _AY _AZ
             _BA _BB _BC _BD _BE _BF _BG _BH _BI _BJ _BK _BL _BM _BN _BO _BP _BQ _BR _BS _BT _BU _BV _BW _BX _BY _BZ
             _CA _CB _CC _CD _CE _CF _CG _CH _CI _CJ _CK _CL _CM _CN _CO _CP _CQ _CR _CS _CT _CU _CV _CW _CX _CY _CZ
             _DA _DB _DC _DD _DE _DF _DG _DH _DI _DJ _DK _DL _DM _DN _DO _DP _DQ _DR _DS _DT _DU _DV _DW _DX _DY _DZ
             _EA _EB _EC _ED _EE _EF _EG _EH _EI _EJ _EK _EL _EM _EN _EO _EP _EQ _ER _ES _ET _EU _EV _EW _EX _EY _EZ
             _FA _FB _FC _FD _FE _FF _FG _FH _FI _FJ _FK _FL _FM _FN _FO
bp_key = e_contacts_sender

[d_1_contacts_uid_only]
blueprint = imio.transmogrifier.iadocs.condition
condition1 = python: name[0:1] in transmogrifier.parts and item.get('_bpk') == u'e_contacts_sender'
condition2 = python: item.get('_uid') is not None

[d_1_contacts_store]
blueprint = imio.transmogrifier.iadocs.store_in_data
condition = python: item.get('_bpk') == u'e_contacts_sender'
bp_key = e_contacts_sender
store_key = _eid
fieldnames = _uid
yield = 0

[d_1_mail_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
b_condition =
filename = eCourriers.csv
fieldnames = _A _eid _C _D _E _F _G _H _sender_id _sender _service _L _M _etype _O _P _Q _R _S _T _U _V _W _X _Y _Z
             _AA _AB _AC _AD _AE _AF _AG _AH _AI _AJ _AK _AL _AM _AN _AO _AP _AQ _AR _AS _AT _AU _AV _AW _AX _AY _AZ
             _BA _BB _BC _BD _BE _BF _BG _BH _BI _BJ _BK _BL _BM
bp_key = e_mail_sender

[d_1_S_only]
blueprint = imio.transmogrifier.iadocs.condition
condition1 = python: name[0:1] in transmogrifier.parts and item.get('_bpk') == u'e_mail_sender'
condition2 = python: item.get('_etype') == 'S'

[d_om_sender_creation]
blueprint = imio.transmogrifier.iadocs.d_om_sender_creation
condition = python: item.get('_bpk') == u'e_mail_sender'

[e_category_match_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
b_condition = python: modules['os'].path.exists(filename)
filename = 1_category_match.csv
fieldnames = _eid _ecode _etitle _eactive _pcode _puid _ptitle _pactive
bp_key = e_category_match

[e_1_mail_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
b_condition = python: not modules['os'].path.exists(modules['imio.transmogrifier.iadocs.utils'].full_path(storage['csvp'], transmogrifier.get('e_category_match_read', {}).get('filename', '_not_found_')))
filename = eCourriers.csv
fieldnames = _A _eid _C _D _E _F _G _H _I _J _K _L _M _N _O _category_id _Q _R _S _T _U _V _W _X _Y _Z
             _AA _AB _AC _AD _AE _AF _AG _AH _AI _AJ _AK _AL _AM _AN _AO _AP _AQ _AR _AS _AT _AU _AV _AW _AX _AY _AZ
             _BA _BB _BC _BD _BE _BF _BG _BH _BI _BJ _BK _BL _BM
bp_key = e_mail_category

[e_1_folder_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
b_condition = python: not modules['os'].path.exists(modules['imio.transmogrifier.iadocs.utils'].full_path(storage['csvp'], transmogrifier.get('e_category_match_read', {}).get('filename', '_not_found_')))
filename = eClassementDossiers.csv
fieldnames = _A _eid _C _D _E _F _G _H _I _category_id _K _L _M _N _O _P _Q _R _S _T _U _V _W _X _Y _Z _AA _AB _AC _AD _AE _AF _AG _AH _AI
bp_key = e_folders_category

[e_1_category_reject]
blueprint = imio.transmogrifier.iadocs.condition
condition1 = python: name[0:1] in transmogrifier.parts and item.get('_bpk') in (u'e_mail_category', u'e_folders_category')
condition2 = python: item.get('_category_id') not in (None, u'0')

[e_1_store_used_category]
blueprint = imio.transmogrifier.iadocs.store_in_data
condition = python: item.get('_bpk') in (u'e_mail_category', u'e_folders_category')
bp_key = e_used_category
store_key = _category_id
store_subkey = _bpk
fieldnames = _eid
yield = 0

[e_1_category_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
b_condition = python: modules['os'].path.exists(filename)
filename = eClassement.csv
fieldnames = _A _eid _C _code _title _active _G _H _I _J _K _L
bp_key = e_category

[e_1_category_check]
blueprint = imio.transmogrifier.iadocs.common_input_checks
bp_key = e_category
condition = python: item.get('_bpk') == u'e_category'
integers =
booleans = _active
hyphen_newline =

[e_category_used_only]
blueprint = imio.transmogrifier.iadocs.condition
condition1 = python: name[0:1] in transmogrifier.parts and item.get('_bpk') == u'e_category'
condition2 = python: item.get('_eid') in storage['data'].get('e_used_category', [])

[e_category_not_in_plone]
blueprint = imio.transmogrifier.iadocs.condition
condition1 = python: name[0:1] in transmogrifier.parts and item.get('_bpk') == u'e_category'
condition2 = python: item['_code'] not in storage['data'].get('p_category', [])

[e_plone_category_write]
blueprint = imio.transmogrifier.iadocs.csv_writer
b_condition = python: not modules['os'].path.exists(modules['imio.transmogrifier.iadocs.utils'].full_path(storage['csvp'], transmogrifier.get('e_category_match_read', {}).get('filename', '_not_found_')))
filename = 0_imio_category.csv
fieldnames = _pcode uid title enabled
headers = pcode puid ptitle pactive
bp_key = p_category
store_key = _pcode
store_key_sort =
yield = 1

[e_category_match_write]
blueprint = imio.transmogrifier.iadocs.csv_writer
b_condition = python: not modules['os'].path.exists(modules['imio.transmogrifier.iadocs.utils'].full_path(storage['csvp'], transmogrifier.get('e_category_match_read', {}).get('filename', '_not_found_')))
condition = python: item.get('_bpk') == 'e_category'
filename = 0_category_match.csv
fieldnames = _eid _code _title _active
headers = eid ecode etitle eactive pcode puid ptitle pactive
bp_key = 0_category_match
yield = 0

[count1]
blueprint = imio.transmogrifier.iadocs.count
group_key = _bpk

[count2]
blueprint = imio.transmogrifier.iadocs.count
group_key = _bpk

[constructor]
blueprint = collective.transmogrifier.sections.constructor
# needs _path and _type

[schemaupdater]
blueprint = transmogrify.dexterity.schemaupdater

[workflowupdater]
blueprint = plone.app.transmogrifier.workflowupdater

[post_actions]
blueprint = imio.transmogrifier.iadocs.post_actions

[reindexobject]
blueprint = plone.app.transmogrifier.reindexobject

[lastsection]
blueprint = imio.transmogrifier.iadocs.last_section

[short_log]
blueprint = imio.transmogrifier.iadocs.short_log

[breakpoint]
# run ipdb if condition is matched
blueprint = imio.transmogrifier.iadocs.breakpoint
condition = python:item.get('_eid', u'') == u'045680'

[stop]
# raise an error to stop the pipeline
blueprint = imio.transmogrifier.iadocs.stop
condition = python:True

[continue]
# never yield the item to the next section
blueprint = collective.transmogrifier.sections.condition
condition = python:False
