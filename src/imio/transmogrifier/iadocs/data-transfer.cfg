[transmogrifier]
pipeline =
    initialization
    a_service_match_read
    a_1_service_read
#    a_1_service_check
    a_plone_service_write
    a_service_match_write
    a_service_update
    constructor
#    1_service_correction
    schemaupdater
#    datesupdater
#    versioning (history)
    reindexobject
    breakpoint
    short_log

# mandatory section !
[config]
# needed if contact encoding group is enabled in Plone
creating_group =
raise_on_error = 1
internal_number_types = organization

[initialization]
blueprint = imio.transmogrifier.iadocs.init
# basepath is an absolute directory. If empty, buildout dir will be used
basepath =
# if subpath, it will be appended to basepath
subpath = imports
# if empty it will be subpath full path
csvpath =

[a_service_match_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
condition = python: modules['os'].path.exists(filename)
# filename is relative to csvpath
filename = 1_service_match.csv
fieldnames = eid eparent etitle uid title
ext_type = e_service_match
# if store_key, no yield is done but each item is stored in storage['data'][{ext_type}][{store_key}]
store_key = eid
# csv_headers = python:True
# csv_encoding = utf8
# dialect = excel
# fmtparam-strict = python:True
# fmtparam-delimiter = python:','
# raise_on_error = ${config:raise_on_error}

[a_1_service_read]
blueprint = imio.transmogrifier.iadocs.csv_reader
filename = eServices.csv
fieldnames = _A _eid title _pid _E _F _G _H _I _J _code _L _M _N _O _P _Q _R _S _T _U _V _W _X _Y _Z _AA _AB _AC _AD _AE _AF _AG _AH _AI _AJ _AK _AL _AM _AN _AO _AP _AQ _AR
ext_type = e_service

[a_1_service_check]
blueprint = imio.transmogrifier.iadocs.common_input_checks
ext_type = e_service
integers =
booleans =
hyphen_newline =
raise_on_error = ${config:raise_on_error}

[a_plone_service_write]
blueprint = imio.transmogrifier.iadocs.csv_writer
condition = python: not storage['data'].get('e_service_match')
filename = 0_imio_service.csv
fieldnames = uid ft t
headers = uid full_title title
ext_type = p_orgs_all
# if store_key, the printed value is not the item but the values in storage['data'][{ext_type}]. The key is considered as store_key field
store_key = uid
store_key_sort = ft

[a_service_match_write]
blueprint = imio.transmogrifier.iadocs.csv_writer
condition = python: not storage['data'].get('e_service_match')
filename = 0_service_match.csv
fieldnames = _eid _pid title
headers = eid parent_eid etitle uid full_title
ext_type = 0_service_match

[a_service_update]
blueprint = imio.transmogrifier.iadocs.a_service_update

[constructor]
blueprint = collective.transmogrifier.sections.constructor
# needs _path and _type

[schemaupdater]
blueprint = transmogrify.dexterity.schemaupdater

[reindexobject]
blueprint = plone.app.transmogrifier.reindexobject

[short_log]
blueprint = imio.transmogrifier.iadocs.short_log

[breakpoint]
blueprint = imio.transmogrifier.iadocs.breakpoint
condition = python:item.get('_eid', u'') == u'0324'

[stop]
blueprint = imio.transmogrifier.iadocs.stop
condition = python:True
